<?php

/**
 * @file
 * Main module file for the userprotect module.
 */

/**
 * Implements hook_form_alter().
 */
function userprotect_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {
    // These are complex cases, and are best handled by manipulating the form
    // values in a custom validate function.
    case 'user_admin_account':
    case 'user_multiple_cancel_confirm':
      // Ensure an array.
      $form['#validate'] = isset($form['#validate']) ? $form['#validate'] : array();
      array_unshift($form['#validate'], 'userprotect_user_admin_account_validate');
      break;

    case 'openid_user_add':
    case 'openid_user_delete_form':
      $account = menu_get_object('user');
      $protected = array();
      if (!userprotect_check_bypass('up_openid') && userprotect_get_user_protection($account, 'up_openid')) {
        switch ($form_id) {
          case 'openid_user_add':
            if (isset($form['openid_identifier'])) {
              $form['openid_identifier']['#disabled'] = TRUE;
              $form['actions']['submit']['#disabled'] = TRUE;
            }
            break;

          case 'openid_user_delete_form':
            if (isset($form['actions']['submit'])) {
              $form['actions']['submit']['#disabled'] = TRUE;
              $form['confirm']['#value'] = 0;
            }
            break;
        }
        $protected['up_openid'] = TRUE;
      }
      userprotect_form_display_protections($account, $protected);
      break;
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 *
 * Ensures user protections are respected in VBO views.
 */
function userprotect_views_bulk_operations_form_alter(&$form, $form_state, $vbo) {
  // VBO <= 3.3 uses the 'users' table. VBO => 3.4 uses views_entity_user.
  // Checking for two table names to keep compatibility with both VBO versions.
  // See https://www.drupal.org/node/1635520.
  if ($vbo->table != 'views_entity_user' && $vbo->table != 'users') {
    return;
  }

  // Alter the appropiate form submitter.
  $form_element = NULL;
  if (isset($form['select']['submit']['#submit'])) {
    $form_element = &$form['select']['submit'];
  }
  elseif (isset($form['actions']['submit']['#submit'])) {
    $form_element = &$form['actions']['submit'];
  }
  else {
    $form_element = &$form;
  }

  $form_element['#validate'] = isset($form_element['#validate']) ? $form_element['#validate'] : array();
  array_unshift($form_element['#validate'], 'userprotect_user_admin_account_validate');
}

/**
 * Implements hook_form_user_profile_form_alter().
 */
function userprotect_form_user_profile_form_alter(&$form, &$form_state) {

  // For each of the fields, first check if any of the user's roles are
  // protecting it, then check if the user themselves is protected from it.
  // If either is TRUE, then disable the field, and mark a fixed form value
  // so it will be properly submitted.
  $account = $form['#user'];
  $protected = array();
  if (isset($form['account']['name']) && !userprotect_check_bypass('up_name') && userprotect_get_user_protection($account, 'up_name')) {
    // If for some reason this field has no initial value, then don't protect
    // it.
    if ($account->name) {
      $form['account']['name']['#disabled'] = TRUE;
      $form['account']['name']['#value'] = $account->name;
      $protected['up_name'] = TRUE;
    }
  }
  if (isset($form['account']['mail']) && !userprotect_check_bypass('up_mail') && userprotect_get_user_protection($account, 'up_mail')) {
    // If for some reason this field has no initial value, then don't protect
    // it.
    if ($account->mail) {
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['mail']['#value'] = $account->mail;
      $protected['up_mail'] = TRUE;
    }
  }
  // Password is an exception, as it needs no value, Just unset it, as
  // there's no need to display two empty boxes that are disabled.
  if (isset($form['account']['pass']) && !userprotect_check_bypass('up_pass') && userprotect_get_user_protection($account, 'up_pass')) {
    // Core stores pass as a required value in 'current_pass_required_values',
    // and we're removing the form element, so remove the pass value from there
    // too to prevent warnings.
    unset($form['account']['pass'], $form['account']['current_pass']);
    $form['account']['current_pass_required_values']['#value'] = array();
    $protected['up_pass'] = TRUE;
  }
  if (isset($form['account']['status']) && !userprotect_check_bypass('up_status') && userprotect_get_user_protection($account, 'up_status')) {
    $form['account']['status']['#disabled'] = TRUE;
    $form['account']['status']['#value'] = $account->status;
    $protected['up_status'] = TRUE;
  }
  // Special hack for RoleAssign module compatibility.
  if (isset($form['account']['roleassign_roles'])) {
    $roles = 'roleassign_roles';
  }
  else {
    $roles = 'roles';
  }
  // Roles is a special case, since it's a tree'd item that needs values.
  // We'll handle that in a custom validation function. Also here we slip
  // the user's account info into the form so it's available to gleen the role
  // info from.
  if (isset($form['account'][$roles]) && !userprotect_check_bypass('up_roles') && userprotect_get_user_protection($account, 'up_roles')) {
    $form['account'][$roles]['#disabled'] = TRUE;
    // Ensure an array.
    $form['account'][$roles]['#element_validate'] = isset($form['account'][$roles]['#element_validate']) ? $form['account'][$roles]['#element_validate'] : array();
    array_unshift($form['account'][$roles]['#element_validate'], 'userprotect_user_edit_fields_validate');
    $form_state['userprotect']['account'] = $account;
    $form_state['userprotect']['field'] = 'roles';
    $protected['up_roles'] = TRUE;
  }

  // At this point, we only need the userprotect-specific validation if the
  // current user and the edited user are not the same.
  if (isset($form['actions']['cancel']) && ($GLOBALS['user']->uid != $account->uid)) {
    // Nothing special for cancel--just disable.
    if (!userprotect_check_bypass('up_cancel') && userprotect_get_user_protection($account, 'up_cancel')) {
      $form['actions']['cancel']['#disabled'] = TRUE;
      $protected['up_cancel'] = TRUE;
    }
  }
  userprotect_form_display_protections($account, $protected);
}

/**
 * Custom validation function for complex field protections.
 */
function userprotect_user_edit_fields_validate($form, &$form_state) {
  $account = $form_state['userprotect']['account'];
  $field = $form_state['userprotect']['field'];

  switch ($field) {
    case 'roles':
      // Add values for all role checkboxes that are valid roles for this user.
      foreach ($account->roles as $rid => $role) {
        // Authenticated user isn't a valid checked item.
        if ($rid != BACKDROP_AUTHENTICATED_RID) {
          if (isset($form[$rid])) {
            form_set_value($form[$rid], 1, $form_state);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_menu().
 */
function userprotect_menu() {
  $items = array();
  $admin = array('administer userprotect');

  // Admin page link.
  $items['admin/config/people/userprotect'] = array(
    'title' => 'User protect',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('userprotect_protected_users'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'description' => 'Protect inidividual users and/or roles from editing operations.',
    'file' => 'userprotect.admin.inc',
  );
  // Default tab.
  $items['admin/config/people/userprotect/protected_users'] = array(
    'title' => 'Protected users',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'weight' => 1,
    'file' => 'userprotect.admin.inc',
  );
  // Protected roles tab.
  $items['admin/config/people/userprotect/protected_roles'] = array(
    'title' => 'Protected roles',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('userprotect_protected_roles'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'userprotect.admin.inc',
  );
  // Administrator bypass tab.
  $items['admin/config/people/userprotect/administrator_bypass'] = array(
    'title' => 'Administrator bypass',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('userprotect_administrator_bypass'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'file' => 'userprotect.admin.inc',
  );
  // Default settings.
  $items['admin/config/people/userprotect/protection_defaults'] = array(
    'title' => 'Protection defaults',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('userprotect_protection_defaults'),
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'type' => MENU_LOCAL_TASK,
    'weight' => 4,
    'file' => 'userprotect.admin.inc',
  );
  // Remove a user from being protected.
  $items['userprotect/delete/%user'] = array(
    'title' => 'Delete protected user',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('userprotect_protected_users_delete_form', 2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => $admin,
    'file' => 'userprotect.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 *  Since we also have to guard against menu items being called
 *  directly from a URL, this page check is necessary.  The checks
 *  are invoked for user/x/edit and user/x/cancel, and replace user
 *  modules's default access checks.
 */
function userprotect_menu_alter(&$callbacks) {
  $callbacks['user/%user/edit']['access callback'] = 'userprotect_user_edit_access';
  $callbacks['user/%user/cancel']['access callback'] = 'userprotect_user_cancel_access';
}

/**
 * Access callback for user edit pages.
 *
 * This replaces user_edit_access from user.module.
 *
 * @param object $account
 *   An object representing the user to be edited.
 *
 * @return bool
 *   TRUE if access is granted.
 *   FALSE otherwise.
 */
function userprotect_user_edit_access($account) {
  // Perform core's access check.
  if ((($GLOBALS['user']->uid == $account->uid && user_access('edit own account')) || user_access('administer users')) && $account->uid > 0) {
    // Check to see if the user's roles are protecting edits, or the user
    // account itself is protected.
    if (!userprotect_check_bypass('up_edit') && userprotect_get_user_protection($account, 'up_edit')) {
      // If so, and we're at /user/X/edit, set a message.
      if (arg(0) == 'user' && is_numeric(arg(1)) && arg(2) == 'edit') {
        backdrop_set_message(t('%user is currently being protected from any edits.', array('%user' => $account->name)), 'error', FALSE);
      }
      return FALSE;
    }
    else {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Access callback for user cancel pages.
 *
 * This replaces the logic from user.module.
 *
 * @param object $account
 *   An object representing the user to be cancelled.
 */
function userprotect_user_cancel_access($account) {
  // Perform core's access check.
  if (((($GLOBALS['user']->uid == $account->uid) && user_access('cancel account')) || user_access('administer users')) && $account->uid > 0) {
    // At this point, we only need the userprotect-specific validation if:
    // 1. The current user and the edited user are not the same.
    // 2. The current user is a user administrator.
    if (($GLOBALS['user']->uid != $account->uid) && user_access('administer users')) {
      // Check to see if the user's roles are protecting cancellation, or the
      // user account itself is protected.
      if (!userprotect_check_bypass('up_cancel') && userprotect_get_user_protection($account, 'up_cancel')) {
        // If so, and we're at /user/X/cancel, set a message.
        if (arg(0) == 'user' && is_numeric(arg(1)) && arg(2) == 'cancel') {
          backdrop_set_message(t('%user is currently being protected from cancellation.', array('%user' => $account->name)), 'error', FALSE);
        }
        return FALSE;
      }
      else {
        return TRUE;
      }
    }
    else {
      return TRUE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_permission().
 */
function userprotect_permission() {
  return array(
    'change own e-mail' => array(
      'title' => t('Change own e-mail'),
      'description' => t('Allow users to edit their own e-mail address.'),
    ),
    'change own password' => array(
      'title' => t('Change own password'),
      'description' => t('Allow users to edit their own password.'),
    ),
    'change own openid' => array(
      'title' => t('Change own OpenID'),
      'description' => t('Allow users to edit their own OpenID identities.'),
    ),
    'administer userprotect' => array(
      'title' => t('Administer User protect'),
      'description' => t('Set up access rules for user administrators for various user-related edits.'),
      'restrict access' => TRUE,
    ),
    'edit own account' => array(
      'title' => t('Edit own user account'),
      'description' => t('Allow users to edit their own account page.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function userprotect_theme() {
  return array(
    'userprotect_admin_role_table' => array(
      'render element' => 'form',
    ),
    'userprotect_protections_bypass' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function userprotect_config_info() {
  $prefixes['userprotect.settings'] = array(
    'label' => t('User protect settings'),
    'group' => t('Configuration'),
  );

  return $prefixes;
}

/**
 * Implements hook_user_insert().
 */
function userprotect_user_insert($account) {
  $config = config('userprotect.settings');

  // A new user is being added. If auto-protect is enabled, then add protection.
  if ($config->get('userprotect_autoprotect')) {
    userprotect_add_user($account->uid, 'user');
    $protected = array_filter($config->get('userprotect_protection_defaults'));
    backdrop_set_message(userprotect_display_protections($account, $protected));
  }
}

/**
 * Implements hook_user_cancel().
 */
function userprotect_user_cancel($edit, $account, $method) {
  switch ($method) {
    // Remove a deleted user from the protections table.
    case 'user_cancel_reassign':
      userprotect_delete_user($account->uid);
      break;
  }
}
/**
 * Implements hook_user_delete().
 */
function userprotect_user_delete($account) {
  userprotect_delete_user($account->uid);
}

/**
 * Deletes all protections for a user.
 */
function userprotect_delete_user($uid) {
  db_delete('userprotect')
    ->condition('uid', $uid)
    ->execute();
}

/**
 * Custom validation function for protecting users from the user
 * administration operations.
 */
function userprotect_user_admin_account_validate($form, &$form_state) {

  // Get the checked users, and the operation name.
  if (isset($form_state['operation']) && $form_state['operation'] instanceof ViewsBulkOperationsAction) {
    $uids = $form_state['selection'];
    $operation = $form_state['operation']->operationId;
  }
  elseif (!empty($form_state['values']['views_bulk_operations'])) {
    $uids = array_filter($form_state['values']['views_bulk_operations']);
    $operation = $form_state['values']['operation'];
  }
  elseif (!empty($form_state['values']['accounts'])) {
    $uids = array_filter($form_state['values']['accounts']);
    $operation_rid = explode('-', $form_state['values']['operation']);
    $operation = $operation_rid[0];
  }
  else {
    // Uids or operation could not be found. Abort.
    return;
  }

  // Perform the check for each submitted user.
  foreach ($uids as $key => $uid) {
    $account = user_load($uid);

    switch ($operation) {
      case 'block':
      case 'unblock':
        // VBO module compatibility.
      case 'action::user_block_user_action':
        // Check to see if any of the user's roles are protected from status
        // changes, then check to see if the user is protected.
        if (!userprotect_check_bypass('up_status') && userprotect_get_user_protection($account, 'up_status')) {
          // If so, then unset the checked user so they will not be processed,
          // and display a warning.
          if (isset($form['accounts'][$uid])) {
            form_set_value($form['accounts'][$uid], 0, $form_state);
          }
          backdrop_set_message(t('%user is protected from status changes, and was not updated.', array('%user' => $account->name)), 'error');
          unset($uids[$key]);
          unset($form_state['selection'][$key]);
          unset($form_state['values']['views_bulk_operations'][$key]);
        }
        break;

      case 'cancel':
        // VBO module compatibility.
      case 'action::views_bulk_operations_delete_item':
      case 'action::views_bulk_operations_user_cancel_action':
        // Check to see if any of the user's roles are protected from
        // cancellation, then check to see if the user is protected.
        if (!userprotect_check_bypass('up_cancel') && userprotect_get_user_protection($account, 'up_cancel')) {
          // If so, then unset the checked user so they will not be processed,
          // and display a warning. Note that the array element has to be
          // completely removed here in order to prevent the user from being
          // cancelled, due to the nature of the mass cancellation callback.
          if (isset($form_state['values']['accounts'][$uid])) {
            unset($form_state['values']['accounts'][$uid]);
          }
          backdrop_set_message(t('%user is protected from cancellation, and was not cancelled.', array('%user' => $account->name)), 'error');
          unset($uids[$key]);
          unset($form_state['selection'][$key]);
          unset($form_state['values']['views_bulk_operations'][$key]);
        }
        break;

      case 'add_role':
      case 'remove_role':
        // RoleAssign module compatibility hack.
      case 'roleassign_add_role':
      case 'roleassign_remove_role':
        // VBO module compatibility.
      case 'action::views_bulk_operations_user_roles_action':
        // Check to see if any of the user's roles are protected from status
        // changes, then check to see if the user is protected.
        if (!userprotect_check_bypass('up_roles') && userprotect_get_user_protection($account, 'up_roles')) {
          // If so, then unset the checked user so they will not be processed,
          // and display a warning.
          if (isset($form['accounts'][$uid])) {
            form_set_value($form['accounts'][$uid], 0, $form_state);
          }
          backdrop_set_message(t('%user is protected from role changes, and was not updated.', array('%user' => $account->name)), 'error');
          unset($uids[$key]);
          unset($form_state['selection'][$key]);
          unset($form_state['values']['views_bulk_operations'][$key]);
        }
        break;

        // VBO module compatibility.
      case 'action::views_bulk_operations_modify_action':
        // First check against all edits.
        if (!userprotect_check_bypass('up_edit') && userprotect_get_user_protection($account, 'up_edit')) {
          backdrop_set_message(t('%user is protected from any changes, and was not updated.', array('%user' => $account->name)), 'error');
          unset($uids[$key]);
          unset($form_state['selection'][$key]);
          unset($form_state['values']['views_bulk_operations'][$key]);
          // Continue to the next user.
          continue 2;
        }

        if (empty($form_state['values']['properties']['show_value'])) {
          // No properties were selected to be changed. Abort.
          return;
        }

        // Check which properties are changed.
        $properties = array_keys(array_filter($form_state['values']['properties']['show_value']));
        foreach ($properties as $property) {
          if (in_array($property, array('name', 'mail', 'status', 'roles', 'openid'))) {
            // Check protection.
            $protection = 'up_' . $property;
            if (!userprotect_check_bypass($protection) && userprotect_get_user_protection($account, $protection)) {
              backdrop_set_message(t('%user is protected from @property changes, and was not updated.', array('%user' => $account->name, '@property' => $property)), 'error');
              unset($uids[$key]);
              unset($form_state['selection'][$key]);
              unset($form_state['values']['views_bulk_operations'][$key]);
              // Continue to the next user.
              continue 3;
            }
          }
        }
        break;
    }
  }
}

/**
 * Builds an array of the inital default protections.
 *
 * @return array
 *   The default protections array.
 */
function userprotect_user_protection_defaults() {
  return array(
    'up_name' => 0,
    'up_mail' => 0,
    'up_pass' => 0,
    'up_status' => 1,
    'up_roles' => 0,
    'up_openid' => 0,
    'up_cancel' => 1,
    'up_edit' => 0,
  );
}

/**
 * Builds an array of the inital default bypass settings for user admins.
 *
 * @return array
 *   The default bypass array.
 */
function userprotect_administrator_bypass_defaults() {
  $defaults = array();
  $protections = userprotect_user_protection_defaults();
  foreach ($protections as $protection => $value) {
    $defaults[$protection] = 0;
  }

  return $defaults;
}

/**
 * Builds an array of all protections and their human-readable text string.
 *
 * @return array
 *   The constructed array.
 */
function userprotect_get_protection_display() {
  return array(
    'up_name' => t('username'),
    'up_mail' => t('e-mail'),
    'up_pass' => t('password'),
    'up_status' => t('status'),
    'up_roles' => t('roles'),
    'up_openid' => t('openid'),
    'up_cancel' => t('cancel'),
    'up_edit' => t('all account edits'),
  );
}

/**
 * Conditionally displays a user message on edit forms listing current
 * protections.
 *
 * @param object $account
 *   The user account object.
 * @param array $protected
 *   An array of protections the current user is receiving.
 */
function userprotect_form_display_protections($account, $protected) {
  // If we're initially displaying an edit form, throw a message if
  // there are any protected fields, so the editor has a clue.
  if (!empty($protected) && !$_POST) {
    backdrop_set_message(userprotect_display_protections($account, $protected));
  }
}

/**
 * Builds a displayable text string of the protections currently in effect for
 * the specified user.
 *
 * @param object $account
 *   The user account object.
 * @param array $protected
 *   An array of protections the current user is receiving.
 *
 * @return string
 *   A text string representing the current protections.
 */
function userprotect_display_protections($account, $protected) {

  // Get the protections display text.
  $display = userprotect_get_protection_display();

  $protections = array();
  // For each protection, check if any of the user's roles are protected, or the
  // user is protected.
  foreach ($protected as $protection => $value) {
    $protections[] = $display[$protection];
  }
  // Display if there are protections and it's an admin user.
  if (count($protections) && user_access('administer users')) {
    $output = t('%user has been protected from the following editing operations: !operations', array(
      '%user' => $account->name,
      '!operations' => implode(', ', $protections),
    ));
  }
  else {
    $output = '';
  }

  return $output;
}

/**
 * Adds a user to the protections table.
 *
 * @param int $uid
 *   The UID of the user to be added.
 * @param string $type
 *   The type of protection to add, either 'user', or 'admin'.
 */
function userprotect_add_user($uid, $type) {
  // Grab the default protections to enable for this user.
  $protections = config_get('userprotect.settings', 'userprotect_protection_defaults');

  // Set initial fields.
  $fields = array(
    'uid' => $uid,
    'up_type' => $type,
  );

  // Add the protections.
  foreach ($protections as $protection => $value) {
    $fields[$protection] = $protections[$protection] ? 1 : 0;
  }

  db_insert('userprotect')
    ->fields($fields)
    ->execute();
}

/**
 * Gives the username of a protected user.
 *
 * @param int $uid
 *   The user ID.
 *
 * @return string
 *   The username.
 */
function userprotect_get_username($uid) {
  return db_query('SELECT name FROM {users} WHERE uid = :uid', array(
    ':uid' => $uid,
  ))->fetchField();
}

/**
 * Checks to see if the current user can bypass a protection.
 *
 * @param string $protection
 *   The protection to check for bypass.
 * @param object $account
 *   (optional) The user to perform the bypass check on
 *   Defaults to the current user.
 *
 * @return bool
 *   TRUE if the user can bypass.
 *   FALSE otherwise.
 */
function userprotect_check_bypass($protection, $account = NULL) {

  $bypass = &backdrop_static(__FUNCTION__, array());
  $bypass_defaults = &backdrop_static(__FUNCTION__ . '_defaults', NULL);

  if (empty($account)) {
    global $user;
    $account = $user;
  }

  // If not a user admin, no checks necessary.
  if (!user_access('administer users', $account)) {
    return FALSE;
  }

  // Set the static array for the current admin.
  if (!isset($bypass[$account->uid])) {
    $result = db_query("SELECT * FROM {userprotect} WHERE uid = :uid AND up_type = :up_type", array(
      ':uid' => $account->uid,
      ':up_type' => 'admin',
    ));
    if ($admin_array = $result->fetchAssoc()) {
      $bypass[$account->uid] = $admin_array;
    }
  }

  // If a per administrator bypass setting exists, return it.
  if (isset($bypass[$account->uid][$protection])) {
    return $bypass[$account->uid][$protection];
  }
  // Otherwise return the default bypass setting.
  else {
    if (!isset($bypass_defaults)) {
      $bypass_defaults = config_get('userprotect.settings', 'userprotect_administrator_bypass_defaults');
    }

    return isset($bypass_defaults[$protection]) ? $bypass_defaults[$protection] : FALSE;
  }

}

/**
 * Checks to see if the specified user has the specified protection.
 *
 * @param object $account
 *   The user object to check.
 * @param string $protection
 *   The protection to check for.
 *
 * @return bool
 *   TRUE if the user has the specified protection.
 *   FALSE otherwise.
 */
function userprotect_get_user_protection($account, $protection) {

  $protections = &backdrop_static(__FUNCTION__, array());
  $role_protections = &backdrop_static(__FUNCTION__ . '_roles', NULL);

  $uid = $account->uid;
  $roles = $account->roles;

  // Users editing their own accounts have the permissions for e-mail
  // and password determined by the role-based setting in the userprotect
  // section at admin/config/people/permissions. This is done for consistency
  // with the way core handles the self-editing of usernames.
  if ($uid == $GLOBALS['user']->uid && in_array($protection, array('up_name', 'up_mail', 'up_pass', 'up_openid', 'up_edit'))) {
    switch ($protection) {
      case 'up_name':
        return !user_access('change own username');

      case 'up_mail':
        return !user_access('change own e-mail');

      case 'up_pass':
        return !user_access('change own password');

      case 'up_openid':
        return !user_access('change own openid');

      case 'up_edit':
        return !user_access('edit own account');
    }
  }

  // If this user hasn't been added to the result array yet, then pull their
  // information.
  if (!isset($protections[$uid])) {

    $result = db_query("SELECT * FROM {userprotect} WHERE uid = :uid AND up_type = :up_type", array(
      ':uid' => $uid,
      ':up_type' => 'user',
    ));
    if ($user_array = $result->fetchAssoc()) {
      $protections[$uid] = $user_array;
    }
  }

  // If per-user protections exist for this user, stop here and return the value
  // of the protection.
  if (isset($protections[$uid][$protection])) {
    return $protections[$uid][$protection];
  }

  // Grab the role protections if they haven't already been initialized.
  if (!isset($role_protections)) {
    $role_protections = config_get('userprotect.settings', 'userprotect_role_protections');
  }

  if (!empty($role_protections)) {
    // For each role, check to see if it's enabled for that protection.
    // Return TRUE as soon as we find a protected role.
    foreach ($roles as $rid => $role) {
      if (!empty($role_protections[$rid][$protection])) {
        return TRUE;
      }
    }
  }

  // No protection enabled.
  return FALSE;
}
